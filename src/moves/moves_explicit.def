template class LocalUpdater<PP_REAL, PP_EXTENDED_SCALAR, PP_SW>;

template class InsertionRemovalUpdater<PP_REAL, PP_EXTENDED_SCALAR, PP_SW>;

template class InsertionRemovalDiagonalUpdater<PP_REAL, PP_EXTENDED_SCALAR, PP_SW>;

template class OperatorPairFlavorUpdater<PP_REAL, PP_EXTENDED_SCALAR, PP_SW>;

template class SingleOperatorShiftUpdater<PP_REAL, PP_EXTENDED_SCALAR, PP_SW>;

template class WormUpdater<PP_REAL, PP_EXTENDED_SCALAR, PP_SW>;

template class WormMover<PP_REAL, PP_EXTENDED_SCALAR, PP_SW>;

template class WormFlavorChanger<PP_REAL, PP_EXTENDED_SCALAR, PP_SW>;

template class WormInsertionRemover<PP_REAL, PP_EXTENDED_SCALAR, PP_SW>;

template class GWormInsertionRemover<PP_REAL, 1, PP_EXTENDED_SCALAR, PP_SW>;

//template class GWormShifter<PP_REAL, 1, PP_EXTENDED_SCALAR, PP_SW>;

template class GWormInsertionRemover<PP_REAL, 2, PP_EXTENDED_SCALAR, PP_SW>;

//template class GWormShifter<PP_REAL, 2, PP_EXTENDED_SCALAR, PP_SW>;

template class EqualTimeG1_TwoTimeG2_Connector<PP_REAL, PP_EXTENDED_SCALAR, PP_SW>;

template bool
global_update<PP_REAL, PP_EXTENDED_SCALAR, alps::random01, PP_SW, ExchangeFlavor, WormExchangeFlavor>(
    alps::random01 &rng,
    double BETA,
    MonteCarloConfiguration <PP_REAL> &mc_config,
    std::vector <PP_REAL> &det_vec,
    PP_SW &sliding_window,
    int num_flavors,
    const ExchangeFlavor &hyb_op_transformer,
    const WormExchangeFlavor &worm_transformer,
    int Nwin
);

template bool
global_update<PP_REAL, PP_EXTENDED_SCALAR, alps::random01, PP_SW, OperatorShift, WormShift>(
    alps::random01 &rng,
    double BETA,
    MonteCarloConfiguration <PP_REAL> &mc_config,
    std::vector <PP_REAL> &det_vec,
    PP_SW &sliding_window,
    int num_flavors,
    const OperatorShift &hyb_op_transformer,
    const WormShift &worm_transformer,
    int Nwin
);
